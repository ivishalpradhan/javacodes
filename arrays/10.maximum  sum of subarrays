//method 1. (BRUTE FORCE)
package javabasic;
import java.util.*;

public class arrayscc {
	public static void maxsubarrays(int numbers[]) { 
		int currsum=0;
		int maxsum= Integer.MIN_VALUE;
		for(int i=0; i<numbers.length; i++) {
			int start= i;
			for(int j=i; j<numbers.length; j++) {
				int end=j;
				currsum=0;
				for(int k=start; k<=end; k++) {
					System.out.print(numbers[k]+" ");
					//subarray sum
					currsum+=numbers[k];
					}
				System.out.println(" current sum:"+currsum);
				if(maxsum<currsum) {
						maxsum=currsum;
					}			
			}
			System.out.println();
		}
		System.out.println("maximum sum:"+maxsum );
			
	}
	public static void main(String args[]){
			int numbers[]= { 2,4,6,8,10};
		maxsubarrays(numbers);
		
		
	
	}
	
	
 
//METHOD 2.(PREFIX SUM)
package javabasic;
import java.util.*;

public class arrayscc {
	   public static void maxSubarraySum(int numbers[]) {
	        int maxSum = Integer.MIN_VALUE;

	        int prefix[] = new int[numbers.length];
	        prefix[0] = numbers[0];
	        for(int i=1; i<prefix.length; i++) {
	            prefix[i] = prefix[i-1] + numbers[i];
	        }

	        for(int i=0; i<numbers.length; i++) {
	            for(int j=i+1; j<numbers.length; j++) {
	                int currSum = i==0 ? prefix[j] : prefix[j] - prefix[i-1];
	                maxSum = Math.max(maxSum, currSum);
	            }
	        }
	        
	        System.out.println("max subarray sum is : " + maxSum);
	    }

	public static void main(String args[]){
			int numbers[]= {1,-2,3,-4,7};
			maxSubarraySum(numbers);
		
	
	}
}
 
//METHOD 3.KEDANES ALGORITHM
	
	package javabasic;
import java.util.*;

public class arrayscc {
	 public static void kadanes(int numbers[]) {
		 int maxsum=Integer.MIN_VALUE;
		 int currsum=0;
		  for(int i=0; i<numbers.length; i++) {
			  currsum=currsum+numbers[i];
			  if(currsum<0) {
				  currsum=0;
			  }
			  maxsum=Math.max(currsum,maxsum);
		  }
		 System.out.println("maximum sum of subarrays"+maxsum);
	 }

	public static void main(String args[]){
			int numbers[]= {-2,-3,4,-1,-2,1,5,-3};
			kadanes(numbers);
		
	
	}
}
 
}
